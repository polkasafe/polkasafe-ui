import { NotificationService } from '../../NotificationService';
import getSourceFirebaseAdmin from '../../global-utils/getSourceFirebaseAdmin';
import { NOTIFICATION_SOURCE } from '../../notification_engine_constants';
import getTemplateRender from '../../global-utils/getTemplateRender';
import { thHouseRef } from '../_utils/thFirestoreRefs';
import { ITHUser } from '../_utils/types';
import getHouseNotificationPrefsFromTHNotificationPrefs from '../_utils/getHouseNotificationPrefsFromTHNotificationPrefs';

const TRIGGER_NAME = 'houseProfileUpdated';
const SOURCE = NOTIFICATION_SOURCE.TOWNHALL;

interface Args {
	house_id: string;
}

export default async function houseProfileUpdated(args: Args) {
	if (!args) throw Error(`Missing arguments for trigger: ${TRIGGER_NAME}`);
	const { house_id } = args;
	if (!house_id || typeof house_id !== 'string') {
		throw Error(`Invalid arguments for trigger: ${TRIGGER_NAME}`);
	}

	const { firestore_db } = getSourceFirebaseAdmin(SOURCE);

	// get post
	const houseData = await thHouseRef(firestore_db, house_id).get();

	if (!houseData.exists) {
		throw Error(`House with id ${house_id} does not exist`);
	}

	// fetch all users who have newPostCreated trigger enabled for this network
	const subscribersSnapshot = await firestore_db
		.collection('users')
		.where(`notification_preferences.triggerPreferences.${house_id}.${TRIGGER_NAME}.enabled`, '==', true)
		.get();

	console.log(`Found ${subscribersSnapshot.size} subscribers for TRIGGER_NAME ${TRIGGER_NAME}`);

	for (const subscriberDoc of subscribersSnapshot.docs) {
		const subscriberData = subscriberDoc.data() as ITHUser;
		if (!subscriberData.notification_preferences) continue;

		console.log(`Subscribed user for ${TRIGGER_NAME} with id: ${subscriberData.id}`);

		const subscriberNotificationPreferences = getHouseNotificationPrefsFromTHNotificationPrefs(
			subscriberData.notification_preferences,
			house_id
		);

		if (!subscriberNotificationPreferences) continue;

		const link = `https://www.townhallgov.com/${house_id}/`;

		const { htmlMessage, markdownMessage, textMessage, subject } = await getTemplateRender(SOURCE, TRIGGER_NAME, {
			...args,
			username: subscriberData.name || !subscriberData.is_username_autogenerated ? subscriberData.username : 'user',
			house_id: house_id,
			link
		});

		const notificationServiceInstance = new NotificationService(
			SOURCE,
			TRIGGER_NAME,
			htmlMessage,
			markdownMessage,
			textMessage,
			subject,
			{
				link
			}
		);

		console.log(
			`Sending notification to user_id ${subscriberDoc.id} for trigger ${TRIGGER_NAME} on house ${house_id} for profile update`
		);
		await notificationServiceInstance.notifyAllChannels(subscriberNotificationPreferences);
	}

	return;
}
