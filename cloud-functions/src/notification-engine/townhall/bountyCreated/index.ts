import { NotificationService } from '../../NotificationService';
import getSourceFirebaseAdmin from '../../global-utils/getSourceFirebaseAdmin';
import { NOTIFICATION_SOURCE } from '../../notification_engine_constants';
import getTemplateRender from '../../global-utils/getTemplateRender';
import { thBountyRef } from '../_utils/thFirestoreRefs';
import { ITHBounty, ITHUser } from '../_utils/types';
import getHouseNotificationPrefsFromTHNotificationPrefs from '../_utils/getHouseNotificationPrefsFromTHNotificationPrefs';

const TRIGGER_NAME = 'bountyCreated';
const SOURCE = NOTIFICATION_SOURCE.TOWNHALL;

interface Args {
	bounty_id: string;
}

export default async function bountyCreated(args: Args) {
	if (!args) throw Error(`Missing arguments for trigger: ${TRIGGER_NAME}`);
	const { bounty_id } = args;
	if (!bounty_id || typeof bounty_id !== 'string') {
		throw Error(`Invalid arguments for trigger: ${TRIGGER_NAME}`);
	}

	const { firestore_db } = getSourceFirebaseAdmin(SOURCE);

	// get post
	const bountyData = (await thBountyRef(firestore_db, bounty_id).get()).data() as ITHBounty;

	if (!bountyData) {
		throw Error(`Bounty with id ${bounty_id} does not exist`);
	}

	// fetch all users who have newPostCreated trigger enabled for this network
	const subscribersSnapshot = await firestore_db
		.collection('users')
		.where(`notification_preferences.triggerPreferences.${'bounty_bird'}.${TRIGGER_NAME}.enabled`, '==', true)
		.get();

	console.log(`Found ${subscribersSnapshot.size} subscribers for TRIGGER_NAME ${TRIGGER_NAME}`);

	for (const subscriberDoc of subscribersSnapshot.docs) {
		const subscriberData = subscriberDoc.data() as ITHUser;
		if (!subscriberData.notification_preferences) continue;

		console.log(`Subscribed user for ${TRIGGER_NAME} with id: ${subscriberData.id}`);

		const subscriberNotificationPreferences = getHouseNotificationPrefsFromTHNotificationPrefs(
			subscriberData.notification_preferences,
			'bounty_bird'
		);

		if (!subscriberNotificationPreferences) continue;

		const link = `https://bountybird.xyz/bounty/${bounty_id}`;

		const { htmlMessage, markdownMessage, textMessage, subject } = await getTemplateRender(SOURCE, TRIGGER_NAME, {
			...args,
			username: subscriberData.name || !subscriberData.is_username_autogenerated ? subscriberData.username : 'user',
			bounty_title: bountyData.task,
			link
		});

		const notificationServiceInstance = new NotificationService(
			SOURCE,
			TRIGGER_NAME,
			htmlMessage,
			markdownMessage,
			textMessage,
			subject,
			{
				link
			}
		);

		console.log(
			`Sending notification to user_id ${subscriberDoc.id} for trigger ${TRIGGER_NAME} on ${'bounty bird'} for bounty ${bountyData.id}`
		);
		await notificationServiceInstance.notifyAllChannels(subscriberNotificationPreferences);
	}

	return;
}
